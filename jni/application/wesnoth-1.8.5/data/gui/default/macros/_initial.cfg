#textdomain wesnoth-lib
#
# Contains the macros for the default widgets.
# - Global GUI macros get the GUI prefix.
# - Local (pre file) GUI macros get the _GUI prefix and should be undefined at
#   the end of the file.
#
#
# For now only TINY and NORMAL gui will be defined, once this works SMALL gui
# will be added, need to see which parts need to change for that. Later there
# will also be definitions for larger screens, mainly for using the extra width
# better.


###############################################################################
###                                                                         ###
### Generic macros usable for all resolutions.                              ###
###                                                                         ###
###############################################################################

# Centers the text horizontally.
# 
# If the text is too wide it returns the left side.
# Rounding happens to the left side.
#define GUI__TEXT_HORIZONTALLY_CENTRED
	"(if(text_width < width, (width - text_width ) / 2, 0))"
#enddef

# Centers the text vertically.
# 
# If the text is too high it returns the top side.
# Rounding happens to the bottom side.
#define GUI__TEXT_VERTICALLY_CENTRED
	"(if(text_height < height, (height - text_height + 1) / 2, 0))"
#enddef

#define GUI__CENTERED_TEXT FONT_SIZE FONT_STYLE FONT_COLOUR
	[text]
		x = {GUI__TEXT_HORIZONTALLY_CENTRED}
		y = {GUI__TEXT_VERTICALLY_CENTRED}
		w = "(text_width)"
		h = "(text_height)"
		font_size = {FONT_SIZE}
		font_style = {FONT_STYLE}
		colour = {FONT_COLOUR}
		text = "(text)"
		text_markup = "(text_markup)"
	[/text]
#enddef	

# This white colour is used for most texts.
#define GUI__FONT_COLOUR_ENABLED__DEFAULT
	"221, 221, 221, 255"
#enddef

# This gray colour is used for most text when the widget is disabled.
#define GUI__FONT_COLOUR_DISABLED__DEFAULT
	"128, 128, 128, 255"
#enddef

# This gold colour is used for the 
# - title labels
# - button captions
# - checkbox captions
# - menu captions
#define GUI__FONT_COLOUR_ENABLED__TITLE
	"188, 176, 136, 255"
#enddef

#define GUI__FONT_COLOUR_ENABLED__DETAILS
	"166, 146, 117, 255"
#enddef

#define GUI__FONT_COLOUR_DISABLED__DETAILS
	{GUI__FONT_COLOUR_DISABLED__DEFAULT}
#enddef

# This now uses the default disabled colour but should be tiny bit lighter.
#define GUI__FONT_COLOUR_DISABLED__TITLE
	{GUI__FONT_COLOUR_DISABLED__DEFAULT}
#enddef

# This colour is used as background in the listbox.
#define GUI__BACKGROUND_COLOUR_ENABLED
	"21, 19, 19, 255"
#enddef

#define GUI__BACKGROUND_COLOUR_DISABLED
	"64, 64, 64, 255"
#enddef

# Draws the background for a selected cell in a listbox. For now there's one
# version for both tiny and normal gui.
#define GUI__LISTBOX_SELECTED_CELL
	
	# corners are 10x10
	[image]
		x = 0
		y = 0 
		name = "misc/selection2-border-topleft.png"
	[/image]

	[image]
		x = "(width - 10)"
		y = 0 
		name = "misc/selection2-border-topright.png"
	[/image]

	[image]
		x = 0
		y = "(height - 10)" 
		name = "misc/selection2-border-botleft.png"
	[/image]

	[image]
		x = "(width - 10)"
		y = "(height - 10)"
		name = "misc/selection2-border-botright.png"
	[/image]

	# since the lines are already quite long scale them instead of stretching
	# the height of the lines is 3 pixels.
	[image]
		x = 10
		y = 0 
		w = "(width - 20)"
		name = "misc/selection2-border-top.png"
	[/image]

	[image]
		x = 10
		y = "(height - 3)"
		w = "(width - 20)"
		name = "misc/selection2-border-bottom.png"
	[/image]

	[image]
		x = 0
		y = 10 
		h= "(height - 20)"
		name = "misc/selection2-border-left.png"
	[/image]

	[image]
		x = "(width - 3)"
		y = 10 
		h = "(height - 20)"
		name = "misc/selection2-border-right.png"
	[/image]

	#main background 320 x 67
	[image]
		x = 3
		y = 3
		w = "(width - 6)"
		h = "(height - 6)"
		name = "misc/selection2-background.png"
	[/image]

#enddef

#define GUI_STACKED WIDGET1 WIDGET2
[stacked_widget]
	definition = "default"
	[stack]
		[layer]
			[row]
				[column]
					{WIDGET1}
				[/column]
			[/row]
		[/layer]
		[layer]
			[row]
				[column]
					{WIDGET2}
				[/column]
			[/row]
		[/layer]
	[/stack]
[/stacked_widget]
#enddef
	
# Forces a wiget to be of a certain size.
# Depending of the flags of the parent widget the item will grow
#
# WIDTH                           Minimum width for the widget.
# HEIGHT                          Minimum height for the widget.
# WIDGET                          The widget to add into the item.
#
# eg instead of
#	[label]
#       # Note Foo has trailing spaces to force extra width. 
#		label = "
#               Foo        
#               "
#	[label]
# you can do:
#
# {GUI_FORCE_WIDGET_MINIMUM_SIZE 150 75 (
#	[label]
#		label = "Foo"
#	[label]
# )}
#
#define GUI_FORCE_WIDGET_MINIMUM_SIZE WIDTH HEIGHT WIDGET
{GUI_STACKED (
	grow_factor = 1
	horizontal_grow = "true"
	vertical_grow = "true"
	{WIDGET}
) (
	[spacer]
		definition = "default"
		width = "{WIDTH}"
		height = "{HEIGHT}"
	[/spacer]
)}
#enddef

#define GUI_FORCE_WIDGET_MINIMUM_SIZE_ID ID WIDTH HEIGHT WIDGET
[grid]
	id = {ID}
	[row]
		[column]
			vertical_grow = "true"
			horizontal_grow = "true"
			{GUI_FORCE_WIDGET_MINIMUM_SIZE {WIDTH} {HEIGHT} {WIDGET}}
		[/column]
	[/row]
[/grid]
#enddef

###############################################################################
###                                                                         ###
### Macros for the tiny gui.                                                ###
###                                                                         ###
###############################################################################

#define GUI_TINY__RESOLUTION
	window_width = 640
	window_height = 480
#enddef

#define GUI_TINY__FONT_SIZE__TINY
	8
#enddef

#define GUI_TINY__FONT_SIZE__SMALL
	9
#enddef

#define GUI_TINY__FONT_SIZE__DEFAULT
	10
#enddef

#define GUI_TINY__FONT_SIZE__LARGE
	11
#enddef

#define GUI_TINY__FONT_SIZE__TITLE
	11
#enddef

###############################################################################
###                                                                         ###
### Macros for the normal gui.                                              ###
###                                                                         ###
###############################################################################

#define GUI_NORMAL__RESOLUTION
	window_width = 0
	window_height = 0
#enddef

#define GUI_NORMAL__FONT_SIZE__TINY
	10
#enddef

#define GUI_NORMAL__FONT_SIZE__SMALL
	12
#enddef

#define GUI_NORMAL__FONT_SIZE__DEFAULT
	14
#enddef

#define GUI_NORMAL__FONT_SIZE__LARGE
	18
#enddef

#define GUI_NORMAL__FONT_SIZE__TITLE
	18
#enddef

#define VERTICAL_BEGIN GROW
[grid]
	[row]
		grow_factor = {GROW}
		[column]
#enddef

#define VERTICAL_NEXT GROW
		[/column]
	[/row]
	[row]
		grow_factor = {GROW}
		[column]
#enddef

#define VERTICAL_END
		[/column]
	[/row]
[/grid]
#enddef

#define HORIZONTAL_BEGIN GROW
[grid]
	[row]
		[column]
			grow_factor = {GROW}
#enddef

#define HORIZONTAL_NEXT GROW
		[/column]
		[column]
			grow_factor = {GROW}
#enddef

#define HORIZONTAL_END
		[/column]
	[/row]
[/grid]
#enddef

#define GUI_SLIDER_EX DEF ID MINIMUM_VALUE MAXIMUM_VALUE STEP_SIZE EXTRA
[slider]
	id = {ID}
	definition = {DEF}
	minimum_value = {MINIMUM_VALUE}
	maximum_value = {MAXIMUM_VALUE}
	step_size = {STEP_SIZE}
	{EXTRA}
[/slider]
#enddef

#define GUI_SLIDER ID MINIMUM_VALUE MAXIMUM_VALUE STEP_SIZE EXTRA
	{GUI_SLIDER_EX "long_label" {ID} {MINIMUM_VALUE} {MAXIMUM_VALUE} {STEP_SIZE} {EXTRA}}
#enddef

#define GUI_LABEL_EX DEF ID LABEL EXTRA
[label]
	id = {ID}
	definition = {DEF}
	label = {LABEL}
	{EXTRA}
[/label]
#enddef

#define GUI_LABEL ID LABEL EXTRA
{GUI_LABEL_EX "default" {ID} {LABEL} {EXTRA}}
#enddef

#define GUI_LABEL_SMALL ID LABEL EXTRA
{GUI_LABEL_EX "default_small" {ID} {LABEL} {EXTRA}}
#enddef

#define GUI_BUTTON ID LABEL EXTRA
[button]
	id = {ID}
	definition = "default"
	label = {LABEL}
	{EXTRA}
[/button]
#enddef

#define GUI_IMAGE ID LABEL EXTRA
[image]
	id = {ID}
	definition = "default"
	label = {LABEL}
	{EXTRA}
[/image]
#enddef

#define GUI_TEXT_BOX_EX DEF ID LABEL EX
[text_box]
	definition = {DEF}
	id = {ID}
	label = {LABEL}
	{EX}
[/text_box]
#enddef

#define GUI_TEXT_BOX ID LABEL EX
{GUI_TEXT_BOX_EX "default" {ID} {LABEL} {EX}}
#enddef

#define GUI_DROPLIST_LABEL
		[column]
			border = "all"
			border_size = 20
			{GUI_LABEL "label" "" (linked_group = "label")}
		[/column]
#enddef
#define GUI_DROPLIST_IMAGE_LABEL
		[column]
			border = "left,right"
			border_size = 3
			{GUI_IMAGE "image" "" (linked_group = "image")}
		[/column]
		{GUI_DROPLIST_LABEL}
#enddef

#define GUI_DROP_BUTTON ID LABEL PANEL_DEF EXTRA
[drop_button]
	id = {ID}
	definition = "default"
	label = {LABEL}
	[panel_definition]
		{PANEL_DEF}
	[/panel_definition]
	{EXTRA}
[/drop_button]
#enddef

#define GUI_LINKED_GROUP ID FIXED_W FIXED_H
	[linked_group]
		id = {ID}
		fixed_width = {FIXED_W}
		fixed_height = {FIXED_H}
	[/linked_group]
#enddef

